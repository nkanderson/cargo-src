{
  "config": [
    {
      "id": 1,
      "build_command": "cargo check",
      "edit_command": "",
      "unstable_features": false,
      "port": 7878,
      "demo_mode": false,
      "demo_mode_root_path": "",
      "context_lines": 2,
      "build_on_load": true,
      "source_directory": "src",
      "save_analysis": true,
      "vcs_link": ""
    }
  ],
  "build": [
    {
      "id": 1,
      "messages": [
        "",
        "   Compiling libc v0.2.29 (file:///Users/Catalpa/Rust/libc)",
        "error: Could not compile `libc`.",
        "To learn more, run the command again with --verbose."
      ],
      "errors": [
        {
          "id": 1,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 2,
              "file_name": "src/lib.rs",
              "byte_start": 6356,
              "byte_end": 6362,
              "line_start": 168,
              "line_end": 168,
              "column_start": 26,
              "column_end": 32,
              "is_primary": true,
              "text": [
                "                   size: <span class=\"src_highlight\">size_t</span>) -> c_int;"
              ],
              "plain_text": "                   size: size_t) -> c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 3,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 4,
              "file_name": "src/lib.rs",
              "byte_start": 7012,
              "byte_end": 7018,
              "line_start": 181,
              "line_end": 181,
              "column_start": 24,
              "column_end": 30,
              "is_primary": true,
              "text": [
                "                 size: <span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                 size: size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 5,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 6,
              "file_name": "src/lib.rs",
              "byte_start": 7043,
              "byte_end": 7049,
              "line_start": 182,
              "line_end": 182,
              "column_start": 24,
              "column_end": 30,
              "is_primary": true,
              "text": [
                "                 nobj: <span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                 nobj: size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 7,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 8,
              "file_name": "src/lib.rs",
              "byte_start": 7107,
              "byte_end": 7113,
              "line_start": 184,
              "line_end": 184,
              "column_start": 21,
              "column_end": 27,
              "is_primary": true,
              "text": [
                "                 -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "                 -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 9,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 10,
              "file_name": "src/lib.rs",
              "byte_start": 7286,
              "byte_end": 7292,
              "line_start": 188,
              "line_end": 188,
              "column_start": 25,
              "column_end": 31,
              "is_primary": true,
              "text": [
                "                  size: <span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                  size: size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 11,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 12,
              "file_name": "src/lib.rs",
              "byte_start": 7318,
              "byte_end": 7324,
              "line_start": 189,
              "line_end": 189,
              "column_start": 25,
              "column_end": 31,
              "is_primary": true,
              "text": [
                "                  nobj: <span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                  nobj: size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 13,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 14,
              "file_name": "src/lib.rs",
              "byte_start": 7384,
              "byte_end": 7390,
              "line_start": 191,
              "line_end": 191,
              "column_start": 22,
              "column_end": 28,
              "is_primary": true,
              "text": [
                "                  -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "                  -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 15,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 16,
              "file_name": "src/lib.rs",
              "byte_start": 8404,
              "byte_end": 8410,
              "line_start": 210,
              "line_end": 210,
              "column_start": 25,
              "column_end": 31,
              "is_primary": true,
              "text": [
                "    pub fn calloc(nobj: <span class=\"src_highlight\">size_t</span>, size: size_t) -> *mut c_void;"
              ],
              "plain_text": "    pub fn calloc(nobj: size_t, size: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 17,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 18,
              "file_name": "src/lib.rs",
              "byte_start": 8418,
              "byte_end": 8424,
              "line_start": 210,
              "line_end": 210,
              "column_start": 39,
              "column_end": 45,
              "is_primary": true,
              "text": [
                "    pub fn calloc(nobj: size_t, size: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn calloc(nobj: size_t, size: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 19,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 20,
              "file_name": "src/lib.rs",
              "byte_start": 8466,
              "byte_end": 8472,
              "line_start": 211,
              "line_end": 211,
              "column_start": 25,
              "column_end": 31,
              "is_primary": true,
              "text": [
                "    pub fn malloc(size: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn malloc(size: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 21,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 22,
              "file_name": "src/lib.rs",
              "byte_start": 8531,
              "byte_end": 8537,
              "line_start": 212,
              "line_end": 212,
              "column_start": 42,
              "column_end": 48,
              "is_primary": true,
              "text": [
                "    pub fn realloc(p: *mut c_void, size: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 23,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 24,
              "file_name": "src/lib.rs",
              "byte_start": 9073,
              "byte_end": 9079,
              "line_start": 224,
              "line_end": 224,
              "column_start": 61,
              "column_end": 67,
              "is_primary": true,
              "text": [
                "    pub fn strncpy(dst: *mut c_char, src: *const c_char, n: <span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "    pub fn strncpy(dst: *mut c_char, src: *const c_char, n: size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 25,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 26,
              "file_name": "src/lib.rs",
              "byte_start": 9242,
              "byte_end": 9248,
              "line_start": 227,
              "line_end": 227,
              "column_start": 58,
              "column_end": 64,
              "is_primary": true,
              "text": [
                "    pub fn strncat(s: *mut c_char, ct: *const c_char, n: <span class=\"src_highlight\">size_t</span>) -> *mut c_char;"
              ],
              "plain_text": "    pub fn strncat(s: *mut c_char, ct: *const c_char, n: size_t) -> *mut c_char;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 27,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 28,
              "file_name": "src/lib.rs",
              "byte_start": 9392,
              "byte_end": 9398,
              "line_start": 229,
              "line_end": 229,
              "column_start": 61,
              "column_end": 67,
              "is_primary": true,
              "text": [
                "    pub fn strncmp(cs: *const c_char, ct: *const c_char, n: <span class=\"src_highlight\">size_t</span>) -> c_int;"
              ],
              "plain_text": "    pub fn strncmp(cs: *const c_char, ct: *const c_char, n: size_t) -> c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 29,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 30,
              "file_name": "src/lib.rs",
              "byte_start": 9663,
              "byte_end": 9669,
              "line_start": 233,
              "line_end": 233,
              "column_start": 60,
              "column_end": 66,
              "is_primary": true,
              "text": [
                "    pub fn strspn(cs: *const c_char, ct: *const c_char) -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn strspn(cs: *const c_char, ct: *const c_char) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 31,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 32,
              "file_name": "src/lib.rs",
              "byte_start": 9731,
              "byte_end": 9737,
              "line_start": 234,
              "line_end": 234,
              "column_start": 61,
              "column_end": 67,
              "is_primary": true,
              "text": [
                "    pub fn strcspn(cs: *const c_char, ct: *const c_char) -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn strcspn(cs: *const c_char, ct: *const c_char) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 33,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 34,
              "file_name": "src/lib.rs",
              "byte_start": 9977,
              "byte_end": 9983,
              "line_start": 238,
              "line_end": 238,
              "column_start": 41,
              "column_end": 47,
              "is_primary": true,
              "text": [
                "    pub fn strlen(cs: *const c_char) -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn strlen(cs: *const c_char) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 35,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 36,
              "file_name": "src/lib.rs",
              "byte_start": 10031,
              "byte_end": 10037,
              "line_start": 239,
              "line_end": 239,
              "column_start": 47,
              "column_end": 53,
              "is_primary": true,
              "text": [
                "    pub fn strnlen(cs: *const c_char, maxlen: <span class=\"src_highlight\">size_t</span>) -> size_t;"
              ],
              "plain_text": "    pub fn strnlen(cs: *const c_char, maxlen: size_t) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 37,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 38,
              "file_name": "src/lib.rs",
              "byte_start": 10042,
              "byte_end": 10048,
              "line_start": 239,
              "line_end": 239,
              "column_start": 58,
              "column_end": 64,
              "is_primary": true,
              "text": [
                "    pub fn strnlen(cs: *const c_char, maxlen: size_t) -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn strnlen(cs: *const c_char, maxlen: size_t) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 39,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 40,
              "file_name": "src/lib.rs",
              "byte_start": 10332,
              "byte_end": 10338,
              "line_start": 244,
              "line_end": 244,
              "column_start": 58,
              "column_end": 64,
              "is_primary": true,
              "text": [
                "    pub fn strxfrm(s: *mut c_char, ct: *const c_char, n: <span class=\"src_highlight\">size_t</span>) -> size_t;"
              ],
              "plain_text": "    pub fn strxfrm(s: *mut c_char, ct: *const c_char, n: size_t) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 41,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 42,
              "file_name": "src/lib.rs",
              "byte_start": 10343,
              "byte_end": 10349,
              "line_start": 244,
              "line_end": 244,
              "column_start": 69,
              "column_end": 75,
              "is_primary": true,
              "text": [
                "    pub fn strxfrm(s: *mut c_char, ct: *const c_char, n: size_t) -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn strxfrm(s: *mut c_char, ct: *const c_char, n: size_t) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 43,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 44,
              "file_name": "src/lib.rs",
              "byte_start": 10393,
              "byte_end": 10399,
              "line_start": 245,
              "line_end": 245,
              "column_start": 43,
              "column_end": 49,
              "is_primary": true,
              "text": [
                "    pub fn wcslen(buf: *const wchar_t) -> <span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn wcslen(buf: *const wchar_t) -> size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 45,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 46,
              "file_name": "src/lib.rs",
              "byte_start": 10464,
              "byte_end": 10470,
              "line_start": 246,
              "line_end": 246,
              "column_start": 64,
              "column_end": 70,
              "is_primary": true,
              "text": [
                "    pub fn wcstombs(dest: *mut c_char, src: *const wchar_t, n: <span class=\"src_highlight\">size_t</span>) -> ::size_t;"
              ],
              "plain_text": "    pub fn wcstombs(dest: *mut c_char, src: *const wchar_t, n: size_t) -> ::size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 47,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 48,
              "file_name": "src/lib.rs",
              "byte_start": 10477,
              "byte_end": 10483,
              "line_start": 246,
              "line_end": 246,
              "column_start": 77,
              "column_end": 83,
              "is_primary": true,
              "text": [
                "    pub fn wcstombs(dest: *mut c_char, src: *const wchar_t, n: size_t) -> ::<span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn wcstombs(dest: *mut c_char, src: *const wchar_t, n: size_t) -> ::size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 49,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 50,
              "file_name": "src/lib.rs",
              "byte_start": 10536,
              "byte_end": 10542,
              "line_start": 248,
              "line_end": 248,
              "column_start": 51,
              "column_end": 57,
              "is_primary": true,
              "text": [
                "    pub fn memchr(cx: *const c_void, c: c_int, n: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn memchr(cx: *const c_void, c: c_int, n: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 51,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 52,
              "file_name": "src/lib.rs",
              "byte_start": 10619,
              "byte_end": 10625,
              "line_start": 249,
              "line_end": 249,
              "column_start": 60,
              "column_end": 66,
              "is_primary": true,
              "text": [
                "    pub fn memcmp(cx: *const c_void, ct: *const c_void, n: <span class=\"src_highlight\">size_t</span>) -> c_int;"
              ],
              "plain_text": "    pub fn memcmp(cx: *const c_void, ct: *const c_void, n: size_t) -> c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 53,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 54,
              "file_name": "src/lib.rs",
              "byte_start": 10697,
              "byte_end": 10703,
              "line_start": 250,
              "line_end": 250,
              "column_start": 61,
              "column_end": 67,
              "is_primary": true,
              "text": [
                "    pub fn memcpy(dest: *mut c_void, src: *const c_void, n: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn memcpy(dest: *mut c_void, src: *const c_void, n: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 55,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 56,
              "file_name": "src/lib.rs",
              "byte_start": 10782,
              "byte_end": 10788,
              "line_start": 251,
              "line_end": 251,
              "column_start": 62,
              "column_end": 68,
              "is_primary": true,
              "text": [
                "    pub fn memmove(dest: *mut c_void, src: *const c_void, n: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn memmove(dest: *mut c_void, src: *const c_void, n: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 57,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in this scope",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 58,
              "file_name": "src/lib.rs",
              "byte_start": 10856,
              "byte_end": 10862,
              "line_start": 252,
              "line_end": 252,
              "column_start": 51,
              "column_end": 57,
              "is_primary": true,
              "text": [
                "    pub fn memset(dest: *mut c_void, c: c_int, n: <span class=\"src_highlight\">size_t</span>) -> *mut c_void;"
              ],
              "plain_text": "    pub fn memset(dest: *mut c_void, c: c_int, n: size_t) -> *mut c_void;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 59,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 60,
              "file_name": "src/unix/mod.rs",
              "byte_start": 352,
              "byte_end": 358,
              "line_start": 13,
              "line_end": 13,
              "column_start": 27,
              "column_end": 33,
              "is_primary": true,
              "text": [
                "pub type sighandler_t = ::<span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "pub type sighandler_t = ::size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 61,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 62,
              "file_name": "src/unix/mod.rs",
              "byte_start": 2416,
              "byte_end": 2422,
              "line_start": 102,
              "line_end": 102,
              "column_start": 24,
              "column_end": 30,
              "is_primary": true,
              "text": [
                "        pub iov_len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "        pub iov_len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 63,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 64,
              "file_name": "src/unix/mod.rs",
              "byte_start": 4076,
              "byte_end": 4082,
              "line_start": 173,
              "line_end": 173,
              "column_start": 26,
              "column_end": 32,
              "is_primary": true,
              "text": [
                "pub const IF_NAMESIZE: ::<span class=\"src_highlight\">size_t</span> = 16;"
              ],
              "plain_text": "pub const IF_NAMESIZE: ::size_t = 16;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 65,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 66,
              "file_name": "src/unix/mod.rs",
              "byte_start": 8300,
              "byte_end": 8306,
              "line_start": 293,
              "line_end": 293,
              "column_start": 44,
              "column_end": 50,
              "is_primary": true,
              "text": [
                "    pub fn snprintf(s: *mut ::c_char, n: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn snprintf(s: *mut ::c_char, n: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 67,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 68,
              "file_name": "src/unix/mod.rs",
              "byte_start": 10607,
              "byte_end": 10613,
              "line_start": 332,
              "line_end": 332,
              "column_start": 65,
              "column_end": 71,
              "is_primary": true,
              "text": [
                "    pub fn sendto(socket: ::c_int, buf: *const ::c_void, len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn sendto(socket: ::c_int, buf: *const ::c_void, len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 69,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 70,
              "file_name": "src/unix/mod.rs",
              "byte_start": 15119,
              "byte_end": 15125,
              "line_start": 418,
              "line_end": 418,
              "column_start": 53,
              "column_end": 59,
              "is_primary": true,
              "text": [
                "                      buf: *mut ::c_char, bufsiz: ::<span class=\"src_highlight\">size_t</span>) -> ::ssize_t;"
              ],
              "plain_text": "                      buf: *mut ::c_char, bufsiz: ::size_t) -> ::ssize_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 71,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 72,
              "file_name": "src/unix/mod.rs",
              "byte_start": 17308,
              "byte_end": 17314,
              "line_start": 462,
              "line_end": 462,
              "column_start": 45,
              "column_end": 51,
              "is_primary": true,
              "text": [
                "    pub fn getcwd(buf: *mut c_char, size: ::<span class=\"src_highlight\">size_t</span>) -> *mut c_char;"
              ],
              "plain_text": "    pub fn getcwd(buf: *mut c_char, size: ::size_t) -> *mut c_char;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 73,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 74,
              "file_name": "src/unix/mod.rs",
              "byte_start": 18463,
              "byte_end": 18469,
              "line_start": 487,
              "line_end": 487,
              "column_start": 32,
              "column_end": 38,
              "is_primary": true,
              "text": [
                "                      align: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                      align: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 75,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 76,
              "file_name": "src/unix/mod.rs",
              "byte_start": 18501,
              "byte_end": 18507,
              "line_start": 488,
              "line_end": 488,
              "column_start": 31,
              "column_end": 37,
              "is_primary": true,
              "text": [
                "                      size: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "                      size: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 77,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 78,
              "file_name": "src/unix/mod.rs",
              "byte_start": 18686,
              "byte_end": 18692,
              "line_start": 491,
              "line_end": 491,
              "column_start": 59,
              "column_end": 65,
              "is_primary": true,
              "text": [
                "    pub fn read(fd: ::c_int, buf: *mut ::c_void, count: ::<span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "    pub fn read(fd: ::c_int, buf: *mut ::c_void, count: ::size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 79,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 80,
              "file_name": "src/unix/mod.rs",
              "byte_start": 20153,
              "byte_end": 20159,
              "line_start": 520,
              "line_end": 520,
              "column_start": 62,
              "column_end": 68,
              "is_primary": true,
              "text": [
                "    pub fn write(fd: ::c_int, buf: *const ::c_void, count: ::<span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "    pub fn write(fd: ::c_int, buf: *const ::c_void, count: ::size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 81,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 82,
              "file_name": "src/unix/mod.rs",
              "byte_start": 20359,
              "byte_end": 20365,
              "line_start": 524,
              "line_end": 524,
              "column_start": 60,
              "column_end": 66,
              "is_primary": true,
              "text": [
                "    pub fn pread(fd: ::c_int, buf: *mut ::c_void, count: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn pread(fd: ::c_int, buf: *mut ::c_void, count: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 83,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 84,
              "file_name": "src/unix/mod.rs",
              "byte_start": 20584,
              "byte_end": 20590,
              "line_start": 528,
              "line_end": 528,
              "column_start": 63,
              "column_end": 69,
              "is_primary": true,
              "text": [
                "    pub fn pwrite(fd: ::c_int, buf: *const ::c_void, count: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn pwrite(fd: ::c_int, buf: *const ::c_void, count: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 85,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 86,
              "file_name": "src/unix/mod.rs",
              "byte_start": 21030,
              "byte_end": 21036,
              "line_start": 539,
              "line_end": 539,
              "column_start": 48,
              "column_end": 54,
              "is_primary": true,
              "text": [
                "    pub fn mlock(addr: *const ::c_void, len: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "    pub fn mlock(addr: *const ::c_void, len: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 87,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 88,
              "file_name": "src/unix/mod.rs",
              "byte_start": 21099,
              "byte_end": 21105,
              "line_start": 540,
              "line_end": 540,
              "column_start": 50,
              "column_end": 56,
              "is_primary": true,
              "text": [
                "    pub fn munlock(addr: *const ::c_void, len: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "    pub fn munlock(addr: *const ::c_void, len: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 89,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 90,
              "file_name": "src/unix/mod.rs",
              "byte_start": 21371,
              "byte_end": 21377,
              "line_start": 547,
              "line_end": 547,
              "column_start": 24,
              "column_end": 30,
              "is_primary": true,
              "text": [
                "                len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 91,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 92,
              "file_name": "src/unix/mod.rs",
              "byte_start": 21691,
              "byte_end": 21697,
              "line_start": 555,
              "line_end": 555,
              "column_start": 47,
              "column_end": 53,
              "is_primary": true,
              "text": [
                "    pub fn munmap(addr: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "    pub fn munmap(addr: *mut ::c_void, len: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 93,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 94,
              "file_name": "src/unix/mod.rs",
              "byte_start": 25042,
              "byte_end": 25048,
              "line_start": 624,
              "line_end": 624,
              "column_start": 52,
              "column_end": 58,
              "is_primary": true,
              "text": [
                "                                     stack_size: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "                                     stack_size: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 95,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 96,
              "file_name": "src/unix/mod.rs",
              "byte_start": 29990,
              "byte_end": 29996,
              "line_start": 702,
              "line_end": 702,
              "column_start": 33,
              "column_end": 39,
              "is_primary": true,
              "text": [
                "                      buflen: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "                      buflen: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 97,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 98,
              "file_name": "src/unix/mod.rs",
              "byte_start": 33403,
              "byte_end": 33409,
              "line_start": 771,
              "line_end": 771,
              "column_start": 52,
              "column_end": 58,
              "is_primary": true,
              "text": [
                "    pub fn gethostname(name: *mut ::c_char, len: ::<span class=\"src_highlight\">size_t</span>) -> ::c_int;"
              ],
              "plain_text": "    pub fn gethostname(name: *mut ::c_char, len: ::size_t) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 99,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 100,
              "file_name": "src/unix/mod.rs",
              "byte_start": 33800,
              "byte_end": 33806,
              "line_start": 778,
              "line_end": 778,
              "column_start": 63,
              "column_end": 69,
              "is_primary": true,
              "text": [
                "    pub fn send(socket: ::c_int, buf: *const ::c_void, len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn send(socket: ::c_int, buf: *const ::c_void, len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 101,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 102,
              "file_name": "src/unix/mod.rs",
              "byte_start": 34021,
              "byte_end": 34027,
              "line_start": 782,
              "line_end": 782,
              "column_start": 61,
              "column_end": 67,
              "is_primary": true,
              "text": [
                "    pub fn recv(socket: ::c_int, buf: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn recv(socket: ::c_int, buf: *mut ::c_void, len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 103,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 104,
              "file_name": "src/unix/mod.rs",
              "byte_start": 36070,
              "byte_end": 36076,
              "line_start": 824,
              "line_end": 824,
              "column_start": 30,
              "column_end": 36,
              "is_primary": true,
              "text": [
                "                    bufsz: ::<span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "                    bufsz: ::size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 105,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 106,
              "file_name": "src/unix/bsd/mod.rs",
              "byte_start": 11709,
              "byte_end": 11715,
              "line_start": 378,
              "line_end": 378,
              "column_start": 33,
              "column_end": 39,
              "is_primary": true,
              "text": [
                "                      buflen: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                      buflen: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 107,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 108,
              "file_name": "src/unix/bsd/mod.rs",
              "byte_start": 11995,
              "byte_end": 12001,
              "line_start": 384,
              "line_end": 384,
              "column_start": 33,
              "column_end": 39,
              "is_primary": true,
              "text": [
                "                      buflen: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                      buflen: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 109,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 110,
              "file_name": "src/unix/bsd/mod.rs",
              "byte_start": 13147,
              "byte_end": 13153,
              "line_start": 409,
              "line_end": 409,
              "column_start": 54,
              "column_end": 60,
              "is_primary": true,
              "text": [
                "    pub fn posix_madvise(addr: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>, advice: ::c_int)"
              ],
              "plain_text": "    pub fn posix_madvise(addr: *mut ::c_void, len: ::size_t, advice: ::c_int)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 111,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 112,
              "file_name": "src/unix/bsd/mod.rs",
              "byte_start": 13879,
              "byte_end": 13885,
              "line_start": 425,
              "line_end": 425,
              "column_start": 48,
              "column_end": 54,
              "is_primary": true,
              "text": [
                "    pub fn madvise(addr: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>, advice: ::c_int)"
              ],
              "plain_text": "    pub fn madvise(addr: *mut ::c_void, len: ::size_t, advice: ::c_int)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 113,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 114,
              "file_name": "src/unix/bsd/mod.rs",
              "byte_start": 14151,
              "byte_end": 14157,
              "line_start": 431,
              "line_end": 431,
              "column_start": 46,
              "column_end": 52,
              "is_primary": true,
              "text": [
                "    pub fn msync(addr: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>, flags: ::c_int) -> ::c_int;"
              ],
              "plain_text": "    pub fn msync(addr: *mut ::c_void, len: ::size_t, flags: ::c_int) -> ::c_int;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 115,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 116,
              "file_name": "src/unix/bsd/mod.rs",
              "byte_start": 14363,
              "byte_end": 14369,
              "line_start": 435,
              "line_end": 435,
              "column_start": 65,
              "column_end": 71,
              "is_primary": true,
              "text": [
                "    pub fn recvfrom(socket: ::c_int, buf: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn recvfrom(socket: ::c_int, buf: *mut ::c_void, len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 117,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 118,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 845,
              "byte_end": 851,
              "line_start": 33,
              "line_end": 33,
              "column_start": 27,
              "column_end": 33,
              "is_primary": true,
              "text": [
                "        pub aio_nbytes: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "        pub aio_nbytes: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 119,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 120,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 1358,
              "byte_end": 1364,
              "line_start": 51,
              "line_end": 51,
              "column_start": 26,
              "column_end": 32,
              "is_primary": true,
              "text": [
                "        pub gl_pathc:  ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "        pub gl_pathc:  ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 121,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 122,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 1419,
              "byte_end": 1425,
              "line_start": 53,
              "line_end": 53,
              "column_start": 26,
              "column_end": 32,
              "is_primary": true,
              "text": [
                "        pub gl_offs:   ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "        pub gl_offs:   ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 123,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 124,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 4414,
              "byte_end": 4420,
              "line_start": 173,
              "line_end": 173,
              "column_start": 24,
              "column_end": 30,
              "is_primary": true,
              "text": [
                "        pub ss_size: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "        pub ss_size: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 125,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 126,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 28159,
              "byte_end": 28165,
              "line_start": 899,
              "line_end": 899,
              "column_start": 32,
              "column_end": 38,
              "is_primary": true,
              "text": [
                "pub const PTHREAD_STACK_MIN: ::<span class=\"src_highlight\">size_t</span> = 8192;"
              ],
              "plain_text": "pub const PTHREAD_STACK_MIN: ::size_t = 8192;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 127,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 128,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 40869,
              "byte_end": 40875,
              "line_start": 1243,
              "line_end": 1243,
              "column_start": 23,
              "column_end": 29,
              "is_primary": true,
              "text": [
                "pub const SIGSTKSZ: ::<span class=\"src_highlight\">size_t</span> = 131072;"
              ],
              "plain_text": "pub const SIGSTKSZ: ::size_t = 131072;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 129,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 130,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 57681,
              "byte_end": 57687,
              "line_start": 1680,
              "line_end": 1680,
              "column_start": 50,
              "column_end": 56,
              "is_primary": true,
              "text": [
                "    pub fn mincore(addr: *const ::c_void, len: ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "    pub fn mincore(addr: *const ::c_void, len: ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 131,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 132,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 57878,
              "byte_end": 57884,
              "line_start": 1684,
              "line_end": 1684,
              "column_start": 42,
              "column_end": 48,
              "is_primary": true,
              "text": [
                "                           sizep: *mut ::<span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "                           sizep: *mut ::size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 133,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 134,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 58084,
              "byte_end": 58090,
              "line_start": 1688,
              "line_end": 1688,
              "column_start": 49,
              "column_end": 55,
              "is_primary": true,
              "text": [
                "    pub fn mprotect(addr: *mut ::c_void, len: ::<span class=\"src_highlight\">size_t</span>, prot: ::c_int)"
              ],
              "plain_text": "    pub fn mprotect(addr: *mut ::c_void, len: ::size_t, prot: ::c_int)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 135,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 136,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 58363,
              "byte_end": 58369,
              "line_start": 1694,
              "line_end": 1694,
              "column_start": 35,
              "column_end": 41,
              "is_primary": true,
              "text": [
                "                  oldlenp: *mut ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                  oldlenp: *mut ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 137,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 138,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 58438,
              "byte_end": 58444,
              "line_start": 1696,
              "line_end": 1696,
              "column_start": 29,
              "column_end": 35,
              "is_primary": true,
              "text": [
                "                  newlen: ::<span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "                  newlen: ::size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 139,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 140,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 58608,
              "byte_end": 58614,
              "line_start": 1700,
              "line_end": 1700,
              "column_start": 41,
              "column_end": 47,
              "is_primary": true,
              "text": [
                "                        oldlenp: *mut ::<span class=\"src_highlight\">size_t</span>,"
              ],
              "plain_text": "                        oldlenp: *mut ::size_t,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 141,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 142,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 58695,
              "byte_end": 58701,
              "line_start": 1702,
              "line_end": 1702,
              "column_start": 35,
              "column_end": 41,
              "is_primary": true,
              "text": [
                "                        newlen: ::<span class=\"src_highlight\">size_t</span>)"
              ],
              "plain_text": "                        newlen: ::size_t)\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 143,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 144,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 59056,
              "byte_end": 59062,
              "line_start": 1708,
              "line_end": 1708,
              "column_start": 63,
              "column_end": 69,
              "is_primary": true,
              "text": [
                "    pub fn pthread_get_stacksize_np(thread: ::pthread_t) -> ::<span class=\"src_highlight\">size_t</span>;"
              ],
              "plain_text": "    pub fn pthread_get_stacksize_np(thread: ::pthread_t) -> ::size_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 145,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 146,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 62752,
              "byte_end": 62758,
              "line_start": 1781,
              "line_end": 1781,
              "column_start": 51,
              "column_end": 57,
              "is_primary": true,
              "text": [
                "                    value: *mut ::c_void, size: ::<span class=\"src_highlight\">size_t</span>, position: u32,"
              ],
              "plain_text": "                    value: *mut ::c_void, size: ::size_t, position: u32,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 147,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 148,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 62938,
              "byte_end": 62944,
              "line_start": 1784,
              "line_end": 1784,
              "column_start": 52,
              "column_end": 58,
              "is_primary": true,
              "text": [
                "                     value: *mut ::c_void, size: ::<span class=\"src_highlight\">size_t</span>, position: u32,"
              ],
              "plain_text": "                     value: *mut ::c_void, size: ::size_t, position: u32,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 149,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 150,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 63130,
              "byte_end": 63136,
              "line_start": 1787,
              "line_end": 1787,
              "column_start": 53,
              "column_end": 59,
              "is_primary": true,
              "text": [
                "                    value: *const ::c_void, size: ::<span class=\"src_highlight\">size_t</span>, position: u32,"
              ],
              "plain_text": "                    value: *const ::c_void, size: ::size_t, position: u32,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 151,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 152,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 63316,
              "byte_end": 63322,
              "line_start": 1790,
              "line_end": 1790,
              "column_start": 54,
              "column_end": 60,
              "is_primary": true,
              "text": [
                "                     value: *const ::c_void, size: ::<span class=\"src_highlight\">size_t</span>, position: u32,"
              ],
              "plain_text": "                     value: *const ::c_void, size: ::size_t, position: u32,\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 153,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 154,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 63482,
              "byte_end": 63488,
              "line_start": 1793,
              "line_end": 1793,
              "column_start": 30,
              "column_end": 36,
              "is_primary": true,
              "text": [
                "                     size: ::<span class=\"src_highlight\">size_t</span>, flags: ::c_int) -> ::ssize_t;"
              ],
              "plain_text": "                     size: ::size_t, flags: ::c_int) -> ::ssize_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 155,
          "message": "cannot find type `<code class=\"code\">size_t</code>` in the crate root",
          "code": {
            "code": "E0412",
            "explanation": "\nThe type name used is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 156,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 63611,
              "byte_end": 63617,
              "line_start": 1795,
              "line_end": 1795,
              "column_start": 31,
              "column_end": 37,
              "is_primary": true,
              "text": [
                "                      size: ::<span class=\"src_highlight\">size_t</span>, flags: ::c_int) -> ::ssize_t;"
              ],
              "plain_text": "                      size: ::size_t, flags: ::c_int) -> ::ssize_t;\n",
              "label": "did you mean `ssize_t`?"
            }
          ],
          "children": []
        },
        {
          "id": 157,
          "message": "the trait `<code class=\"code\">Copy</code>` may not be implemented for this type",
          "code": {
            "code": "E0204",
            "explanation": "\nAn attempt to implement the `Copy` trait for a struct failed because one of the\nfields does not implement `Copy`. To fix this, you must implement `Copy` for the\nmentioned field. Note that this may not be possible, as in the example of\n\n```compile_fail,E0204\nstruct Foo {\n    foo : Vec<u32>,\n}\n\nimpl Copy for Foo { }\n```\n\nThis fails because `Vec<T>` does not implement `Copy` for any `T`.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)]\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 158,
              "file_name": "src/unix/mod.rs",
              "byte_start": 2401,
              "byte_end": 2422,
              "line_start": 102,
              "line_end": 102,
              "column_start": 9,
              "column_end": 30,
              "is_primary": false,
              "text": [
                "        <span class=\"src_highlight\">pub iov_len: ::size_t</span>,"
              ],
              "plain_text": "        pub iov_len: ::size_t,\n",
              "label": "this field does not implement `Copy`"
            },
            {
              "id": 159,
              "file_name": "src/macros.rs",
              "byte_start": 1243,
              "byte_end": 1254,
              "line_start": 44,
              "line_end": 44,
              "column_start": 14,
              "column_end": 25,
              "is_primary": true,
              "text": [
                "        impl <span class=\"src_highlight\">::dox::Copy</span> for $i {}"
              ],
              "plain_text": "        impl ::dox::Copy for $i {}\n",
              "label": ""
            }
          ],
          "children": []
        },
        {
          "id": 160,
          "message": "the trait `<code class=\"code\">Copy</code>` may not be implemented for this type",
          "code": {
            "code": "E0204",
            "explanation": "\nAn attempt to implement the `Copy` trait for a struct failed because one of the\nfields does not implement `Copy`. To fix this, you must implement `Copy` for the\nmentioned field. Note that this may not be possible, as in the example of\n\n```compile_fail,E0204\nstruct Foo {\n    foo : Vec<u32>,\n}\n\nimpl Copy for Foo { }\n```\n\nThis fails because `Vec<T>` does not implement `Copy` for any `T`.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)]\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 161,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 827,
              "byte_end": 851,
              "line_start": 33,
              "line_end": 33,
              "column_start": 9,
              "column_end": 33,
              "is_primary": false,
              "text": [
                "        <span class=\"src_highlight\">pub aio_nbytes: ::size_t</span>,"
              ],
              "plain_text": "        pub aio_nbytes: ::size_t,\n",
              "label": "this field does not implement `Copy`"
            },
            {
              "id": 162,
              "file_name": "src/macros.rs",
              "byte_start": 1243,
              "byte_end": 1254,
              "line_start": 44,
              "line_end": 44,
              "column_start": 14,
              "column_end": 25,
              "is_primary": true,
              "text": [
                "        impl <span class=\"src_highlight\">::dox::Copy</span> for $i {}"
              ],
              "plain_text": "        impl ::dox::Copy for $i {}\n",
              "label": ""
            }
          ],
          "children": []
        },
        {
          "id": 163,
          "message": "the trait `<code class=\"code\">Copy</code>` may not be implemented for this type",
          "code": {
            "code": "E0204",
            "explanation": "\nAn attempt to implement the `Copy` trait for a struct failed because one of the\nfields does not implement `Copy`. To fix this, you must implement `Copy` for the\nmentioned field. Note that this may not be possible, as in the example of\n\n```compile_fail,E0204\nstruct Foo {\n    foo : Vec<u32>,\n}\n\nimpl Copy for Foo { }\n```\n\nThis fails because `Vec<T>` does not implement `Copy` for any `T`.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)]\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 164,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 1341,
              "byte_end": 1364,
              "line_start": 51,
              "line_end": 51,
              "column_start": 9,
              "column_end": 32,
              "is_primary": false,
              "text": [
                "        <span class=\"src_highlight\">pub gl_pathc:  ::size_t</span>,"
              ],
              "plain_text": "        pub gl_pathc:  ::size_t,\n",
              "label": "this field does not implement `Copy`"
            },
            {
              "id": 165,
              "file_name": "src/macros.rs",
              "byte_start": 1243,
              "byte_end": 1254,
              "line_start": 44,
              "line_end": 44,
              "column_start": 14,
              "column_end": 25,
              "is_primary": true,
              "text": [
                "        impl <span class=\"src_highlight\">::dox::Copy</span> for $i {}"
              ],
              "plain_text": "        impl ::dox::Copy for $i {}\n",
              "label": ""
            }
          ],
          "children": []
        },
        {
          "id": 166,
          "message": "the trait `<code class=\"code\">Copy</code>` may not be implemented for this type",
          "code": {
            "code": "E0204",
            "explanation": "\nAn attempt to implement the `Copy` trait for a struct failed because one of the\nfields does not implement `Copy`. To fix this, you must implement `Copy` for the\nmentioned field. Note that this may not be possible, as in the example of\n\n```compile_fail,E0204\nstruct Foo {\n    foo : Vec<u32>,\n}\n\nimpl Copy for Foo { }\n```\n\nThis fails because `Vec<T>` does not implement `Copy` for any `T`.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)]\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 167,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 4229,
              "byte_end": 4261,
              "line_start": 166,
              "line_end": 166,
              "column_start": 9,
              "column_end": 41,
              "is_primary": false,
              "text": [
                "        <span class=\"src_highlight\">pub sa_sigaction: ::sighandler_t</span>,"
              ],
              "plain_text": "        pub sa_sigaction: ::sighandler_t,\n",
              "label": "this field does not implement `Copy`"
            },
            {
              "id": 168,
              "file_name": "src/macros.rs",
              "byte_start": 1243,
              "byte_end": 1254,
              "line_start": 44,
              "line_end": 44,
              "column_start": 14,
              "column_end": 25,
              "is_primary": true,
              "text": [
                "        impl <span class=\"src_highlight\">::dox::Copy</span> for $i {}"
              ],
              "plain_text": "        impl ::dox::Copy for $i {}\n",
              "label": ""
            }
          ],
          "children": []
        },
        {
          "id": 169,
          "message": "the trait `<code class=\"code\">Copy</code>` may not be implemented for this type",
          "code": {
            "code": "E0204",
            "explanation": "\nAn attempt to implement the `Copy` trait for a struct failed because one of the\nfields does not implement `Copy`. To fix this, you must implement `Copy` for the\nmentioned field. Note that this may not be possible, as in the example of\n\n```compile_fail,E0204\nstruct Foo {\n    foo : Vec<u32>,\n}\n\nimpl Copy for Foo { }\n```\n\nThis fails because `Vec<T>` does not implement `Copy` for any `T`.\n\nHere's another example that will fail:\n\n```compile_fail,E0204\n#[derive(Copy)]\nstruct Foo<'a> {\n    ty: &'a mut bool,\n}\n```\n\nThis fails because `&mut T` is not `Copy`, even when `T` is `Copy` (this\ndiffers from the behavior for `&T`, which is always `Copy`).\n"
          },
          "level": "error",
          "spans": [
            {
              "id": 170,
              "file_name": "src/unix/bsd/apple/mod.rs",
              "byte_start": 4399,
              "byte_end": 4420,
              "line_start": 173,
              "line_end": 173,
              "column_start": 9,
              "column_end": 30,
              "is_primary": false,
              "text": [
                "        <span class=\"src_highlight\">pub ss_size: ::size_t</span>,"
              ],
              "plain_text": "        pub ss_size: ::size_t,\n",
              "label": "this field does not implement `Copy`"
            },
            {
              "id": 171,
              "file_name": "src/macros.rs",
              "byte_start": 1243,
              "byte_end": 1254,
              "line_start": 44,
              "line_end": 44,
              "column_start": 14,
              "column_end": 25,
              "is_primary": true,
              "text": [
                "        impl <span class=\"src_highlight\">::dox::Copy</span> for $i {}"
              ],
              "plain_text": "        impl ::dox::Copy for $i {}\n",
              "label": ""
            }
          ],
          "children": []
        },
        {
          "id": 172,
          "message": "aborting due to 83 previous errors",
          "code": null,
          "level": "error",
          "spans": [],
          "children": []
        }
      ],
      "push_data_key": "904160000"
    }
  ],
  "find": [
    {
      "id": 1,
      "impls": 1,
      "results": [
        {
          "file_name": "src/lib.rs",
          "lines": [
            {
              "line_start": 36,
              "column_start": 6,
              "column_end": 16,
              "line": "<span class='kw'>impl</span> <span class='ident  class_id class_id_8 src_link' data-impls='2' title='PanicGuardasdf { message }\n\n Once this object is created, it can only be destroyed in an orderly\n fashion.  Attempting to clean it up from a panic handler will abort the\n process.\n' data-link='src/lib.rs:31:12:31:26'>PanicGuard</span> {"
            },
            {
              "line_start": 46,
              "column_start": 15,
              "column_end": 25,
              "line": "<span class='kw'>impl</span> <span class='ident' data-impls='0'>Drop</span> <span class='kw'>for</span> <span class='ident  class_id class_id_8 src_link' data-impls='2' data-link='src/lib.rs:31:12:31:26' title='PanicGuardasdf { message }\n\n Once this object is created, it can only be destroyed in an orderly\n fashion.  Attempting to clean it up from a panic handler will abort the\n process.\n'>PanicGuard</span> {"
            }
          ]
        }
      ]
    },
    {
      "id": 2,
      "impls": 2,
      "results": [
        {
          "file_name": "src/impls10.rs",
          "lines": [
            {
              "line_start": 36,
              "column_start": 6,
              "column_end": 16,
              "line": "<span class='kw'>impl</span> <span class='ident  class_id class_id_8 src_link' data-impls='2' title='PanicGuardasdf { message }\n\n Once this object is created, it can only be destroyed in an orderly\n fashion.  Attempting to clean it up from a panic handler will abort the\n process.\n' data-link='src/lib.rs:31:12:31:26'>PanicGuard</span> {"
            },
            {
              "line_start": 46,
              "column_start": 15,
              "column_end": 25,
              "line": "<span class='kw'>impl</span> <span class='ident' data-impls='0'>Drop</span> <span class='kw'>for</span> <span class='ident  class_id class_id_8 src_link' data-impls='2' data-link='src/lib.rs:31:12:31:26' title='PanicGuardasdf { message }\n\n Once this object is created, it can only be destroyed in an orderly\n fashion.  Attempting to clean it up from a panic handler will abort the\n process.\n'>PanicGuard</span> {"
            }
          ]
        }
      ]
    }
  ],
  "search": [
    {
      "id": 1,
      "needle": "off_t",
      "defs": [
        {
          "file_name": "src/unix/bsd/mod.rs",
          "lines": [
            {
              "line_start": 5,
              "column_start": 10,
              "column_end": 15,
              "line": "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_211 src_link' data-link='search:211' title='i64' data-impls='0'>off_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i64</span>;"
            },
            {
              "line_start": 5,
              "column_start": 10,
              "column_end": 15,
              "line": "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_211 src_link' data-link='search:211' title='i64' data-impls='0'>off_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i64</span>;"
            }
          ]
        }
      ],
      "refs": [
        {
          "file_name": "src/unix/bsd/apple/mod.rs",
          "lines": [
            {
              "line_start": 31,
              "column_start": 27,
              "column_end": 32,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485187 src_link' data-impls='0' data-link='search:2147485187' title='i64'>aio_offset</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 31,
              "column_start": 27,
              "column_end": 32,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485187 src_link' data-impls='0' data-link='search:2147485187' title='i64'>aio_offset</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 106,
              "column_start": 24,
              "column_end": 29,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485249 src_link' data-impls='0' data-link='search:2147485249' title='i64'>st_size</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 106,
              "column_start": 24,
              "column_end": 29,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485249 src_link' data-impls='0' data-link='search:2147485249' title='i64'>st_size</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 180,
              "column_start": 27,
              "column_end": 32,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485299 src_link' data-impls='0' data-link='search:2147485299' title='i64'>fst_offset</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 180,
              "column_start": 27,
              "column_end": 32,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485299 src_link' data-impls='0' data-link='search:2147485299' title='i64'>fst_offset</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 181,
              "column_start": 27,
              "column_end": 32,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485300 src_link' title='i64' data-link='search:2147485300' data-impls='0'>fst_length</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 181,
              "column_start": 27,
              "column_end": 32,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485300 src_link' title='i64' data-link='search:2147485300' data-impls='0'>fst_length</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 182,
              "column_start": 31,
              "column_end": 36,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485301 src_link' data-link='search:2147485301' data-impls='0' title='i64'>fst_bytesalloc</span>: ::<span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0' title='i64'>off_t</span>,"
            },
            {
              "line_start": 182,
              "column_start": 31,
              "column_end": 36,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485301 src_link' data-link='search:2147485301' data-impls='0' title='i64'>fst_bytesalloc</span>: ::<span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0' title='i64'>off_t</span>,"
            },
            {
              "line_start": 186,
              "column_start": 26,
              "column_end": 31,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485302 src_link' data-impls='0' data-link='search:2147485302' title='i64'>ra_offset</span>: ::<span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 186,
              "column_start": 26,
              "column_end": 31,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485302 src_link' data-impls='0' data-link='search:2147485302' title='i64'>ra_offset</span>: ::<span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 292,
              "column_start": 24,
              "column_end": 29,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485385 src_link' title='i64' data-link='search:2147485385' data-impls='0'>l_start</span>: ::<span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 292,
              "column_start": 24,
              "column_end": 29,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485385 src_link' title='i64' data-link='search:2147485385' data-impls='0'>l_start</span>: ::<span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 293,
              "column_start": 22,
              "column_end": 27,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485386 src_link' data-link='search:2147485386' data-impls='0' title='i64'>l_len</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 293,
              "column_start": 22,
              "column_end": 27,
              "line": "        <span class='kw'>pub</span> <span class='ident  class_id class_id_2147485386 src_link' data-link='search:2147485386' data-impls='0' title='i64'>l_len</span>: ::<span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 1756,
              "column_start": 31,
              "column_end": 36,
              "line": "                    <span class='ident' data-impls='0'>offset</span>: ::<span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 1756,
              "column_start": 31,
              "column_end": 36,
              "line": "                    <span class='ident' data-impls='0'>offset</span>: ::<span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 1757,
              "column_start": 33,
              "column_end": 38,
              "line": "                    <span class='ident' data-impls='0'>len</span>: <span class='op  glob' data-location='1757:26'>*</span><span class='kw-2'>mut</span> ::<span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64' data-impls='0'>off_t</span>,"
            },
            {
              "line_start": 1757,
              "column_start": 33,
              "column_end": 38,
              "line": "                    <span class='ident' data-impls='0'>len</span>: <span class='op  glob' data-location='1757:26'>*</span><span class='kw-2'>mut</span> ::<span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64' data-impls='0'>off_t</span>,"
            }
          ]
        },
        {
          "file_name": "src/unix/mod.rs",
          "lines": [
            {
              "line_start": 480,
              "column_start": 39,
              "column_end": 44,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484142 src_link' title='fn (fd: ::c_int, offset: off_t, whence: ::c_int) -&gt; off_t' data-link='search:2147484142' data-impls='0'>lseek</span>(<span class='ident' data-impls='0'>fd</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>, <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>, <span class='ident' data-impls='0'>whence</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_211 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64'>off_t</span>;"
            },
            {
              "line_start": 480,
              "column_start": 39,
              "column_end": 44,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484142 src_link' title='fn (fd: ::c_int, offset: off_t, whence: ::c_int) -&gt; off_t' data-link='search:2147484142' data-impls='0'>lseek</span>(<span class='ident' data-impls='0'>fd</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>, <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>, <span class='ident' data-impls='0'>whence</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_211 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64'>off_t</span>;"
            },
            {
              "line_start": 480,
              "column_start": 66,
              "column_end": 71,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484142 src_link' title='fn (fd: ::c_int, offset: off_t, whence: ::c_int) -&gt; off_t' data-link='search:2147484142' data-impls='0'>lseek</span>(<span class='ident' data-impls='0'>fd</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>, <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>, <span class='ident' data-impls='0'>whence</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_211 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64'>off_t</span>;"
            },
            {
              "line_start": 480,
              "column_start": 66,
              "column_end": 71,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484142 src_link' title='fn (fd: ::c_int, offset: off_t, whence: ::c_int) -&gt; off_t' data-link='search:2147484142' data-impls='0'>lseek</span>(<span class='ident' data-impls='0'>fd</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>, <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>, <span class='ident' data-impls='0'>whence</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_211 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64'>off_t</span>;"
            },
            {
              "line_start": 525,
              "column_start": 26,
              "column_end": 31,
              "line": "                 <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_43 src_link' data-link='src/lib.rs:132:10:132:17' data-impls='0' title='isize'>ssize_t</span>;"
            },
            {
              "line_start": 525,
              "column_start": 26,
              "column_end": 31,
              "line": "                 <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_43 src_link' data-link='src/lib.rs:132:10:132:17' data-impls='0' title='isize'>ssize_t</span>;"
            },
            {
              "line_start": 529,
              "column_start": 27,
              "column_end": 32,
              "line": "                  <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_43 src_link' title='isize' data-link='src/lib.rs:132:10:132:17' data-impls='0'>ssize_t</span>;"
            },
            {
              "line_start": 529,
              "column_start": 27,
              "column_end": 32,
              "line": "                  <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_43 src_link' title='isize' data-link='src/lib.rs:132:10:132:17' data-impls='0'>ssize_t</span>;"
            },
            {
              "line_start": 551,
              "column_start": 25,
              "column_end": 30,
              "line": "                <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0' title='i64'>off_t</span>)"
            },
            {
              "line_start": 551,
              "column_start": 25,
              "column_end": 30,
              "line": "                <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0' title='i64'>off_t</span>)"
            },
            {
              "line_start": 581,
              "column_start": 43,
              "column_end": 48,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484252 src_link' data-impls='0' data-link='search:2147484252' title='fn (fd: ::c_int, length: off_t) -&gt; ::c_int'>ftruncate</span>(<span class='ident' data-impls='0'>fd</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>, <span class='ident' data-impls='0'>length</span>: <span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64' data-impls='0'>off_t</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;"
            },
            {
              "line_start": 581,
              "column_start": 43,
              "column_end": 48,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484252 src_link' data-impls='0' data-link='search:2147484252' title='fn (fd: ::c_int, length: off_t) -&gt; ::c_int'>ftruncate</span>(<span class='ident' data-impls='0'>fd</span>: ::<span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>, <span class='ident' data-impls='0'>length</span>: <span class='ident  class_id class_id_211 src_link' data-link='src/unix/bsd/mod.rs:5:10:5:15' title='i64' data-impls='0'>off_t</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;"
            },
            {
              "line_start": 867,
              "column_start": 29,
              "column_end": 34,
              "line": "                  <span class='ident' data-impls='0'>offset</span>: ::<span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 867,
              "column_start": 29,
              "column_end": 34,
              "line": "                  <span class='ident' data-impls='0'>offset</span>: ::<span class='ident  class_id class_id_211 src_link' data-impls='0' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15'>off_t</span>,"
            },
            {
              "line_start": 869,
              "column_start": 45,
              "column_end": 50,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484554 src_link' title='fn (stream: *mut ::FILE) -&gt; ::off_t' data-impls='0' data-link='search:2147484554'>ftello</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='869:27'>*</span><span class='kw-2'>mut</span> ::<span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-impls='0' data-link='src/lib.rs:134:10:134:14'>FILE</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>;"
            },
            {
              "line_start": 869,
              "column_start": 45,
              "column_end": 50,
              "line": "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147484554 src_link' title='fn (stream: *mut ::FILE) -&gt; ::off_t' data-impls='0' data-link='search:2147484554'>ftello</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='869:27'>*</span><span class='kw-2'>mut</span> ::<span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-impls='0' data-link='src/lib.rs:134:10:134:14'>FILE</span>) <span class='op'>-&gt;</span> ::<span class='ident  class_id class_id_211 src_link' title='i64' data-link='src/unix/bsd/mod.rs:5:10:5:15' data-impls='0'>off_t</span>;"
            }
          ]
        }
      ]
    },
    {
      "id": 2,
      "defs": [
        {
          "file_name": "src/dox.rs",
          "lines": [
            {
              "line_start": 4,
              "column_start": 5,
              "column_end": 8,
              "line": "<span class='kw'>mod</span> <span class='ident  class_id class_id_13 src_link' title='src/dox.rs' data-link='search:13' data-impls='0'>imp</span> {"
            }
          ]
        }
      ],
      "refs": []
    }
  ],
  "src": [
    {
      "id": 1,
      "Directory": {
          "path": [
              "src"
          ],
          "files": [
              {
                  "kind": "Directory",
                  "name": "unix"
              },
              {
                  "kind": "File",
                  "name": "dox.rs"
              },
              {
                  "kind": "File",
                  "name": "lib.rs"
              },
              {
                  "kind": "File",
                  "name": "macros.rs"
              },
              {
                  "kind": "File",
                  "name": "redox.rs"
              },
              {
                  "kind": "File",
                  "name": "windows.rs"
              }
          ]
      }
    },
    {
      "id": 2,
      "Source": {
          "path": [
              "src",
              "lib.rs"
          ],
          "lines": [
              "<span class='comment'>// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT</span>",
              "<span class='comment'>// file at the top-level directory of this distribution and at</span>",
              "<span class='comment'>// http://rust-lang.org/COPYRIGHT.</span>",
              "<span class='comment'>//</span>",
              "<span class='comment'>// Licensed under the Apache License, Version 2.0 &lt;LICENSE-APACHE or</span>",
              "<span class='comment'>// http://www.apache.org/licenses/LICENSE-2.0&gt; or the MIT license</span>",
              "<span class='comment'>// &lt;LICENSE-MIT or http://opensource.org/licenses/MIT&gt;, at your</span>",
              "<span class='comment'>// option. This file may not be copied, modified, or distributed</span>",
              "<span class='comment'>// except according to those terms.</span>",
              "",
              "<span class='doccomment'>//! Crate docs</span>",
              "",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>allow</span>(<span class='ident' data-impls='0'>bad_style</span>, <span class='ident' data-impls='0'>overflowing_literals</span>, <span class='ident' data-impls='0'>improper_ctypes</span>)]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>crate_type</span> <span class='op'>=</span> <span class='string'>&quot;rlib&quot;</span>]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>crate_name</span> <span class='op'>=</span> <span class='string'>&quot;libc&quot;</span>]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>dox</span>, <span class='ident' data-impls='0'>feature</span>(<span class='ident' data-impls='0'>no_core</span>, <span class='ident' data-impls='0'>lang_items</span>))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>dox</span>, <span class='ident' data-impls='0'>no_core</span>)]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>doc</span>(<span class='ident' data-impls='0'>html_logo_url</span> <span class='op'>=</span> <span class='string'>&quot;https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png&quot;</span>,",
              "       <span class='ident' data-impls='0'>html_favicon_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/favicon.ico&quot;</span>)]</span>",
              "",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;linux&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86_64&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-linux-gnu&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;linux&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/i686-unknown-linux-gnu&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;linux&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;arm&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/arm-unknown-linux-gnueabihf&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;linux&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;mips&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/mips-unknown-linux-gnu&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;linux&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;aarch64&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/aarch64-unknown-linux-gnu&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;linux&quot;</span>, <span class='ident' data-impls='0'>target_env</span> <span class='op'>=</span> <span class='string'>&quot;musl&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-linux-musl&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86_64&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-apple-darwin&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/i686-apple-darwin&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>windows</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86_64&quot;</span>, <span class='ident' data-impls='0'>target_env</span> <span class='op'>=</span> <span class='string'>&quot;gnu&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-pc-windows-gnu&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>windows</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>, <span class='ident' data-impls='0'>target_env</span> <span class='op'>=</span> <span class='string'>&quot;gnu&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/i686-pc-windows-gnu&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>windows</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86_64&quot;</span>, <span class='ident' data-impls='0'>target_env</span> <span class='op'>=</span> <span class='string'>&quot;msvc&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-pc-windows-msvc&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>windows</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>, <span class='ident' data-impls='0'>target_env</span> <span class='op'>=</span> <span class='string'>&quot;msvc&quot;</span>), <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/i686-pc-windows-msvc&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;android&quot;</span>, <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/arm-linux-androideabi&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;freebsd&quot;</span>, <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-freebsd&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;openbsd&quot;</span>, <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-openbsd&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;bitrig&quot;</span>, <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-bitrig&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;netbsd&quot;</span>, <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-netbsd&quot;</span>",
              "))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;dragonfly&quot;</span>, <span class='ident' data-impls='0'>doc</span>(",
              "    <span class='ident' data-impls='0'>html_root_url</span> <span class='op'>=</span> <span class='string'>&quot;https://doc.rust-lang.org/libc/x86_64-unknown-dragonfly&quot;</span>",
              "))]</span>",
              "",
              "<span class='comment'>// Attributes needed when building as part of the standard library</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>stdbuild</span>, <span class='ident' data-impls='0'>feature</span>(<span class='ident' data-impls='0'>no_std</span>, <span class='ident' data-impls='0'>core</span>, <span class='ident' data-impls='0'>core_slice_ext</span>, <span class='ident' data-impls='0'>staged_api</span>, <span class='ident' data-impls='0'>custom_attribute</span>, <span class='ident' data-impls='0'>cfg_target_vendor</span>))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>stdbuild</span>, <span class='ident' data-impls='0'>feature</span>(<span class='ident' data-impls='0'>link_cfg</span>))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>stdbuild</span>, <span class='ident' data-impls='0'>no_std</span>)]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>stdbuild</span>, <span class='ident' data-impls='0'>staged_api</span>)]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>stdbuild</span>, <span class='ident' data-impls='0'>allow</span>(<span class='ident' data-impls='0'>warnings</span>))]</span>",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>stdbuild</span>, <span class='ident' data-impls='0'>unstable</span>(<span class='ident' data-impls='0'>feature</span> <span class='op'>=</span> <span class='string'>&quot;libc&quot;</span>,",
              "                               <span class='ident' data-impls='0'>reason</span> <span class='op'>=</span> <span class='string'>&quot;use `libc` from crates.io&quot;</span>,",
              "                               <span class='ident' data-impls='0'>issue</span> <span class='op'>=</span> <span class='string'>&quot;27783&quot;</span>))]</span>",
              "",
              "<span class='attribute'>#<span class='op'>!</span>[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>not</span>(<span class='ident' data-impls='0'>feature</span> <span class='op'>=</span> <span class='string'>&quot;use_std&quot;</span>), <span class='ident' data-impls='0'>no_std</span>)]</span>",
              "",
              "<span class='attribute'>#[<span class='ident' data-impls='0'>cfg</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>not</span>(<span class='ident' data-impls='0'>stdbuild</span>), <span class='ident' data-impls='0'>not</span>(<span class='ident' data-impls='0'>dox</span>), <span class='ident' data-impls='0'>feature</span> <span class='op'>=</span> <span class='string'>&quot;use_std&quot;</span>))]</span>",
              "<span class='kw'>extern</span> <span class='kw'>crate</span> <span class='ident' data-impls='0'>std</span> <span class='kw'>as</span> <span class='ident' data-impls='0'>core</span>;",
              "",
              "<span class='attribute'>#[<span class='ident' data-impls='0'>macro_use</span>]</span> <span class='kw'>mod</span> <span class='ident  class_id class_id_4 src_link' title='src/macros.rs' data-impls='0' data-link='src/macros.rs:1:1:1:1'>macros</span>;",
              "<span class='kw'>mod</span> <span class='ident  class_id class_id_11 src_link' data-impls='0' title='src/dox.rs' data-link='src/dox.rs:1:1:1:1'>dox</span>;",
              "",
              "<span class='comment'>// Use repr(u8) as LLVM expects `void*` to be the same as `i8*` to help enable</span>",
              "<span class='comment'>// more optimization opportunities around it recognizing things like</span>",
              "<span class='comment'>// malloc/free.</span>",
              "<span class='attribute'>#[<span class='ident' data-impls='0'>repr</span>(<span class='ident' data-impls='0'>u8</span>)]</span>",
              "<span class='kw'>pub</span> <span class='kw'>enum</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-link='search:18' data-impls='0'>c_void</span> {",
              "    <span class='comment'>// Two dummy variants so the #[repr] attribute can be used.</span>",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>doc</span>(<span class='ident' data-impls='0'>hidden</span>)]</span>",
              "    <span class='ident  class_id class_id_2147483657 src_link' data-impls='0' data-link='search:2147483657' title='c_void::__variant1'>__variant1</span>,",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>doc</span>(<span class='ident' data-impls='0'>hidden</span>)]</span>",
              "    <span class='ident  class_id class_id_2147483658 src_link' data-impls='0' title='c_void::__variant2' data-link='search:2147483658'>__variant2</span>,",
              "}",
              "",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_19 src_link' title='i8' data-impls='0' data-link='search:19'>int8_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i8</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_20 src_link' data-impls='0' title='i16' data-link='search:20'>int16_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i16</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_21 src_link' title='i32' data-impls='0' data-link='search:21'>int32_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i32</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_22 src_link' title='i64' data-link='search:22' data-impls='0'>int64_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i64</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_23 src_link' data-link='search:23' title='u8' data-impls='0'>uint8_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u8</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_24 src_link' data-link='search:24' title='u16' data-impls='0'>uint16_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u16</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_25 src_link' data-impls='0' data-link='search:25' title='u32'>uint32_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u32</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_26 src_link' data-impls='0' data-link='search:26' title='u64'>uint64_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u64</span>;",
              "",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_27 src_link' data-link='search:27' data-impls='0' title='i8'>c_schar</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i8</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_28 src_link' title='u8' data-impls='0' data-link='search:28'>c_uchar</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u8</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_29 src_link' data-impls='0' title='i16' data-link='search:29'>c_short</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i16</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_30 src_link' title='u16' data-impls='0' data-link='search:30'>c_ushort</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u16</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_31 src_link' data-link='search:31' data-impls='0' title='i32'>c_int</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i32</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_32 src_link' title='u32' data-link='search:32' data-impls='0'>c_uint</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u32</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_33 src_link' data-link='search:33' data-impls='0' title='f32'>c_float</span> <span class='op'>=</span> <span class='ident' data-impls='0'>f32</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_34 src_link' title='f64' data-link='search:34' data-impls='0'>c_double</span> <span class='op'>=</span> <span class='ident' data-impls='0'>f64</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_35 src_link' data-link='search:35' data-impls='0' title='i64'>c_longlong</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i64</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_36 src_link' title='u64' data-impls='0' data-link='search:36'>c_ulonglong</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u64</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_37 src_link' title='i64' data-link='search:37' data-impls='0'>intmax_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>i64</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_38 src_link' title='u64' data-impls='0' data-link='search:38'>uintmax_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>u64</span>;",
              "",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_39 src_link' title='usize' data-link='search:39' data-impls='0'>size_t_asdf</span> <span class='op'>=</span> <span class='ident' data-impls='0'>usize</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_40 src_link' data-impls='0' title='isize' data-link='search:40'>ptrdiff_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>isize</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_41 src_link' data-link='search:41' data-impls='0' title='isize'>intptr_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>isize</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_42 src_link' title='usize' data-impls='0' data-link='search:42'>uintptr_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>usize</span>;",
              "<span class='kw'>pub</span> <span class='kw'>type</span> <span class='ident  class_id class_id_43 src_link' data-link='search:43' data-impls='0' title='isize'>ssize_t</span> <span class='op'>=</span> <span class='ident' data-impls='0'>isize</span>;",
              "",
              "<span class='kw'>pub</span> <span class='kw'>enum</span> <span class='ident  class_id class_id_44 src_link' data-link='search:44' data-impls='0' title='FILE::{}'>FILE</span> {}",
              "<span class='kw'>pub</span> <span class='kw'>enum</span> <span class='ident  class_id class_id_45 src_link' data-impls='0' data-link='search:45' title='fpos_t::{}'>fpos_t</span> {} <span class='comment'>// TODO: fill this out with a struct</span>",
              "",
              "<span class='kw'>extern</span> {",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483659 src_link' data-impls='0' title='fn (c: c_int) -&gt; c_int' data-link='search:2147483659'>isalnum</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483661 src_link' data-link='search:2147483661' title='fn (c: c_int) -&gt; c_int' data-impls='0'>isalpha</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483663 src_link' data-impls='0' title='fn (c: c_int) -&gt; c_int' data-link='search:2147483663'>iscntrl</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483665 src_link' data-link='search:2147483665' data-impls='0' title='fn (c: c_int) -&gt; c_int'>isdigit</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483667 src_link' data-link='search:2147483667' title='fn (c: c_int) -&gt; c_int' data-impls='0'>isgraph</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483669 src_link' data-impls='0' data-link='search:2147483669' title='fn (c: c_int) -&gt; c_int'>islower</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483671 src_link' data-link='search:2147483671' title='fn (c: c_int) -&gt; c_int' data-impls='0'>isprint</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483673 src_link' data-impls='0' title='fn (c: c_int) -&gt; c_int' data-link='search:2147483673'>ispunct</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483675 src_link' data-link='search:2147483675' title='fn (c: c_int) -&gt; c_int' data-impls='0'>isspace</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483677 src_link' title='fn (c: c_int) -&gt; c_int' data-link='search:2147483677' data-impls='0'>isupper</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483679 src_link' title='fn (c: c_int) -&gt; c_int' data-link='search:2147483679' data-impls='0'>isxdigit</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483681 src_link' data-impls='0' title='fn (c: c_int) -&gt; c_int' data-link='search:2147483681'>tolower</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483683 src_link' data-impls='0' data-link='search:2147483683' title='fn (c: c_int) -&gt; c_int'>toupper</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;fopen$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483685 src_link' data-impls='0' title='fn (filename: *const c_char, mode: *const c_char) -&gt; *mut FILE' data-link='search:2147483685'>fopen</span>(<span class='ident' data-impls='0'>filename</span>: <span class='op  glob' data-location='154:28'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>,",
              "                 <span class='ident' data-impls='0'>mode</span>: <span class='op  glob' data-location='155:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='155:42'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' title='FILE::{}' data-link='src/lib.rs:134:10:134:14'>FILE</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;freopen$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483688 src_link' data-impls='0' title='fn (filename: *const c_char, mode: *const c_char, file: *mut FILE) -&gt; *mut FILE' data-link='search:2147483688'>freopen</span>(<span class='ident' data-impls='0'>filename</span>: <span class='op  glob' data-location='158:30'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>, <span class='ident' data-impls='0'>mode</span>: <span class='op  glob' data-location='158:51'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>,",
              "                   <span class='ident' data-impls='0'>file</span>: <span class='op  glob' data-location='159:26'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-link='src/lib.rs:134:10:134:14' data-impls='0'>FILE</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='159:40'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' data-link='src/lib.rs:134:10:134:14' title='FILE::{}'>FILE</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483692 src_link' data-link='search:2147483692' data-impls='0' title='fn (file: *mut FILE) -&gt; c_int'>fflush</span>(<span class='ident' data-impls='0'>file</span>: <span class='op  glob' data-location='160:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' title='FILE::{}' data-link='src/lib.rs:134:10:134:14'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483694 src_link' title='fn (file: *mut FILE) -&gt; c_int' data-impls='0' data-link='search:2147483694'>fclose</span>(<span class='ident' data-impls='0'>file</span>: <span class='op  glob' data-location='161:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-link='src/lib.rs:134:10:134:14' data-impls='0' title='FILE::{}'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483696 src_link' data-impls='0' title='fn (filename: *const c_char) -&gt; c_int' data-link='search:2147483696'>remove</span>(<span class='ident' data-impls='0'>filename</span>: <span class='op  glob' data-location='162:29'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483698 src_link' data-impls='0' data-link='search:2147483698' title='fn (oldname: *const c_char, newname: *const c_char) -&gt; c_int'>rename</span>(<span class='ident' data-impls='0'>oldname</span>: <span class='op  glob' data-location='163:28'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>, <span class='ident' data-impls='0'>newname</span>: <span class='op  glob' data-location='163:52'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483701 src_link' data-link='search:2147483701' data-impls='0' title='fn () -&gt; *mut FILE'>tmpfile</span>() <span class='op'>-&gt;</span> <span class='op  glob' data-location='164:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-link='src/lib.rs:134:10:134:14' title='FILE::{}' data-impls='0'>FILE</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483702 src_link' data-link='search:2147483702' data-impls='0' title='fn (stream: *mut FILE, buffer: *mut c_char, mode: c_int, size: size_t) -&gt; c_int'>setvbuf</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='165:28'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-impls='0' data-link='src/lib.rs:134:10:134:14'>FILE</span>,",
              "                   <span class='ident' data-impls='0'>buffer</span>: <span class='op  glob' data-location='166:28'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>,",
              "                   <span class='ident' data-impls='0'>mode</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>,",
              "                   <span class='ident' data-impls='0'>size</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483707 src_link' title='fn (stream: *mut FILE, buf: *mut c_char) -&gt; ()' data-link='search:2147483707' data-impls='0'>setbuf</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='169:27'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' title='FILE::{}' data-link='src/lib.rs:134:10:134:14'>FILE</span>, <span class='ident' data-impls='0'>buf</span>: <span class='op  glob' data-location='169:43'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>);",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483710 src_link' data-link='search:2147483710' data-impls='0' title='fn () -&gt; c_int'>getchar</span>() <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483711 src_link' data-link='search:2147483711' data-impls='0' title='fn (c: c_int) -&gt; c_int'>putchar</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483713 src_link' data-impls='0' data-link='search:2147483713' title='fn (stream: *mut FILE) -&gt; c_int'>fgetc</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='172:26'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' title='FILE::{}' data-link='src/lib.rs:134:10:134:14'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483715 src_link' title='fn (buf: *mut c_char, n: c_int, stream: *mut FILE) -&gt; *mut c_char' data-impls='0' data-link='search:2147483715'>fgets</span>(<span class='ident' data-impls='0'>buf</span>: <span class='op  glob' data-location='173:23'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>, <span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='173:54'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' data-link='src/lib.rs:134:10:134:14' title='FILE::{}'>FILE</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='173:68'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483719 src_link' data-link='search:2147483719' title='fn (c: c_int, stream: *mut FILE) -&gt; c_int' data-impls='0'>fputc</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>, <span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='174:36'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-link='src/lib.rs:134:10:134:14' data-impls='0' title='FILE::{}'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;fputs$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483722 src_link' title='fn (s: *const c_char, stream: *mut FILE) -&gt; c_int' data-impls='0' data-link='search:2147483722'>fputs</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='177:21'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='177:44'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' title='FILE::{}' data-link='src/lib.rs:134:10:134:14'>FILE</span>)<span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483725 src_link' data-impls='0' data-link='search:2147483725' title='fn (s: *const c_char) -&gt; c_int'>puts</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='178:20'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483727 src_link' data-link='search:2147483727' title='fn (c: c_int, stream: *mut FILE) -&gt; c_int' data-impls='0'>ungetc</span>(<span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>, <span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='179:37'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' data-link='src/lib.rs:134:10:134:14' title='FILE::{}'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483730 src_link' data-impls='0' title='fn (ptr: *mut c_void, size: size_t, nobj: size_t, stream: *mut FILE) -&gt; size_t' data-link='search:2147483730'>fread</span>(<span class='ident' data-impls='0'>ptr</span>: <span class='op  glob' data-location='180:23'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-link='src/lib.rs:98:10:98:16' data-impls='0' title='c_void::{__variant1, __variant2}'>c_void</span>,",
              "                 <span class='ident' data-impls='0'>size</span>: <span class='ident' data-impls='0'>size_t</span>,",
              "                 <span class='ident' data-impls='0'>nobj</span>: <span class='ident' data-impls='0'>size_t</span>,",
              "                 <span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='183:26'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-link='src/lib.rs:134:10:134:14' data-impls='0'>FILE</span>)",
              "                 <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;fwrite$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483735 src_link' title='fn (ptr: *const c_void, size: size_t, nobj: size_t, stream: *mut FILE) -&gt; size_t' data-impls='0' data-link='search:2147483735'>fwrite</span>(<span class='ident' data-impls='0'>ptr</span>: <span class='op  glob' data-location='187:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_18 src_link' data-link='src/lib.rs:98:10:98:16' title='c_void::{__variant1, __variant2}' data-impls='0'>c_void</span>,",
              "                  <span class='ident' data-impls='0'>size</span>: <span class='ident' data-impls='0'>size_t</span>,",
              "                  <span class='ident' data-impls='0'>nobj</span>: <span class='ident' data-impls='0'>size_t</span>,",
              "                  <span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='190:27'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-link='src/lib.rs:134:10:134:14' title='FILE::{}' data-impls='0'>FILE</span>)",
              "                  <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483740 src_link' data-impls='0' title='fn (stream: *mut FILE, offset: c_long, whence: c_int) -&gt; c_int' data-link='search:2147483740'>fseek</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='192:26'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-link='src/lib.rs:134:10:134:14' title='FILE::{}' data-impls='0'>FILE</span>, <span class='ident' data-impls='0'>offset</span>: <span class='ident  class_id class_id_1724 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/apple/b64.rs:3:10:3:16'>c_long</span>, <span class='ident' data-impls='0'>whence</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483744 src_link' data-link='search:2147483744' data-impls='0' title='fn (stream: *mut FILE) -&gt; c_long'>ftell</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='193:26'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' data-link='src/lib.rs:134:10:134:14' title='FILE::{}'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_1724 src_link' title='i64' data-impls='0' data-link='src/unix/bsd/apple/b64.rs:3:10:3:16'>c_long</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483746 src_link' data-impls='0' data-link='search:2147483746' title='fn (stream: *mut FILE) -&gt; ()'>rewind</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='194:27'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' data-link='src/lib.rs:134:10:134:14' title='FILE::{}'>FILE</span>);",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;netbsd&quot;</span>, <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;__fgetpos50&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483748 src_link' data-impls='0' title='fn (stream: *mut FILE, ptr: *mut fpos_t) -&gt; c_int' data-link='search:2147483748'>fgetpos</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='196:28'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-link='src/lib.rs:134:10:134:14' data-impls='0'>FILE</span>, <span class='ident' data-impls='0'>ptr</span>: <span class='op  glob' data-location='196:44'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_45 src_link' data-link='src/lib.rs:135:10:135:16' data-impls='0' title='fpos_t::{}'>fpos_t</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;netbsd&quot;</span>, <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;__fsetpos50&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483751 src_link' data-impls='0' data-link='search:2147483751' title='fn (stream: *mut FILE, ptr: *const fpos_t) -&gt; c_int'>fsetpos</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='198:28'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-link='src/lib.rs:134:10:134:14' title='FILE::{}' data-impls='0'>FILE</span>, <span class='ident' data-impls='0'>ptr</span>: <span class='op  glob' data-location='198:44'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_45 src_link' title='fpos_t::{}' data-impls='0' data-link='src/lib.rs:135:10:135:16'>fpos_t</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-impls='0' data-link='src/lib.rs:119:10:119:15'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483754 src_link' title='fn (stream: *mut FILE) -&gt; c_int' data-impls='0' data-link='search:2147483754'>feof</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='199:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' title='FILE::{}' data-link='src/lib.rs:134:10:134:14' data-impls='0'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483756 src_link' data-link='search:2147483756' title='fn (stream: *mut FILE) -&gt; c_int' data-impls='0'>ferror</span>(<span class='ident' data-impls='0'>stream</span>: <span class='op  glob' data-location='200:27'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_44 src_link' data-impls='0' data-link='src/lib.rs:134:10:134:14' title='FILE::{}'>FILE</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483758 src_link' title='fn (s: *const c_char) -&gt; ()' data-link='search:2147483758' data-impls='0'>perror</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='201:22'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>);",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483760 src_link' data-link='search:2147483760' data-impls='0' title='fn (s: *const c_char) -&gt; c_int'>atoi</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='202:20'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;strtod$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483762 src_link' title='fn (s: *const c_char, endp: *mut *mut c_char) -&gt; c_double' data-link='search:2147483762' data-impls='0'>strtod</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='205:22'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>, <span class='ident' data-impls='0'>endp</span>: <span class='op  glob' data-location='205:43'>*</span><span class='kw-2'>mut</span> <span class='op  glob' data-location='205:48'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_34 src_link' data-link='src/lib.rs:122:10:122:18' data-impls='0' title='f64'>c_double</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483765 src_link' data-link='search:2147483765' data-impls='0' title='fn (s: *const c_char, endp: *mut *mut c_char, base: c_int) -&gt; c_long'>strtol</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='206:22'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>,",
              "                  <span class='ident' data-impls='0'>endp</span>: <span class='op  glob' data-location='207:25'>*</span><span class='kw-2'>mut</span> <span class='op  glob' data-location='207:30'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>base</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_1724 src_link' data-link='src/unix/bsd/apple/b64.rs:3:10:3:16' data-impls='0' title='i64'>c_long</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483769 src_link' data-link='search:2147483769' data-impls='0' title='fn (s: *const c_char, endp: *mut *mut c_char, base: c_int) -&gt; c_ulong'>strtoul</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='208:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>endp</span>: <span class='op  glob' data-location='208:44'>*</span><span class='kw-2'>mut</span> <span class='op  glob' data-location='208:49'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>,",
              "                   <span class='ident' data-impls='0'>base</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_1725 src_link' data-link='src/unix/bsd/apple/b64.rs:4:10:4:17' title='u64' data-impls='0'>c_ulong</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483773 src_link' data-link='search:2147483773' title='fn (nobj: size_t, size: size_t) -&gt; *mut c_void' data-impls='0'>calloc</span>(<span class='ident' data-impls='0'>nobj</span>: <span class='ident' data-impls='0'>size_t</span>, <span class='ident' data-impls='0'>size</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='210:50'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483776 src_link' data-link='search:2147483776' title='fn (size: size_t) -&gt; *mut c_void' data-impls='0'>malloc</span>(<span class='ident' data-impls='0'>size</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='211:36'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483778 src_link' data-impls='0' data-link='search:2147483778' title='fn (p: *mut c_void, size: size_t) -&gt; *mut c_void'>realloc</span>(<span class='ident' data-impls='0'>p</span>: <span class='op  glob' data-location='212:23'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>, <span class='ident' data-impls='0'>size</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='212:53'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-link='src/lib.rs:98:10:98:16' title='c_void::{__variant1, __variant2}' data-impls='0'>c_void</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483781 src_link' data-link='search:2147483781' title='fn (p: *mut c_void) -&gt; ()' data-impls='0'>free</span>(<span class='ident' data-impls='0'>p</span>: <span class='op  glob' data-location='213:20'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>);",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483783 src_link' data-link='search:2147483783' data-impls='0' title='fn () -&gt; !'>abort</span>() <span class='op'>-&gt;</span> <span class='op'>!</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483784 src_link' title='fn (status: c_int) -&gt; !' data-impls='0' data-link='search:2147483784'>exit</span>(<span class='ident' data-impls='0'>status</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='op'>!</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483786 src_link' title='fn (status: c_int) -&gt; !' data-impls='0' data-link='search:2147483786'>_exit</span>(<span class='ident' data-impls='0'>status</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>) <span class='op'>-&gt;</span> <span class='op'>!</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483788 src_link' data-link='search:2147483788' title='fn (cb: extern &quot;C&quot; fn()) -&gt; c_int' data-impls='0'>atexit</span>(<span class='ident' data-impls='0'>cb</span>: <span class='kw'>extern</span> <span class='kw'>fn</span>()) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;system$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483790 src_link' data-impls='0' data-link='search:2147483790' title='fn (s: *const c_char) -&gt; c_int'>system</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='220:22'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' data-impls='0' title='i32'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483792 src_link' data-impls='0' data-link='search:2147483792' title='fn (s: *const c_char) -&gt; *mut c_char'>getenv</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='221:22'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='221:40'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>;",
              "",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483794 src_link' data-link='search:2147483794' data-impls='0' title='fn (dst: *mut c_char, src: *const c_char) -&gt; *mut c_char'>strcpy</span>(<span class='ident' data-impls='0'>dst</span>: <span class='op  glob' data-location='223:24'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>src</span>: <span class='op  glob' data-location='223:42'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='223:60'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483797 src_link' title='fn (dst: *mut c_char, src: *const c_char, n: size_t) -&gt; *mut c_char' data-link='search:2147483797' data-impls='0'>strncpy</span>(<span class='ident' data-impls='0'>dst</span>: <span class='op  glob' data-location='224:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>, <span class='ident' data-impls='0'>src</span>: <span class='op  glob' data-location='224:43'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>)",
              "                   <span class='op'>-&gt;</span> <span class='op  glob' data-location='225:23'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483801 src_link' data-link='search:2147483801' title='fn (s: *mut c_char, ct: *const c_char) -&gt; *mut c_char' data-impls='0'>strcat</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='226:22'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='226:39'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='226:57'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483804 src_link' title='fn (s: *mut c_char, ct: *const c_char, n: size_t) -&gt; *mut c_char' data-impls='0' data-link='search:2147483804'>strncat</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='227:23'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='227:40'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='227:69'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483808 src_link' data-impls='0' title='fn (cs: *const c_char, ct: *const c_char) -&gt; c_int' data-link='search:2147483808'>strcmp</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='228:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='228:42'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483811 src_link' data-link='search:2147483811' title='fn (cs: *const c_char, ct: *const c_char, n: size_t) -&gt; c_int' data-impls='0'>strncmp</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='229:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='229:43'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483815 src_link' title='fn (cs: *const c_char, ct: *const c_char) -&gt; c_int' data-impls='0' data-link='search:2147483815'>strcoll</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='230:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='230:43'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483818 src_link' data-link='search:2147483818' title='fn (cs: *const c_char, c: c_int) -&gt; *mut c_char' data-impls='0'>strchr</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='231:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>, <span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='231:51'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483821 src_link' title='fn (cs: *const c_char, c: c_int) -&gt; *mut c_char' data-impls='0' data-link='search:2147483821'>strrchr</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='232:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>, <span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='232:52'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483824 src_link' title='fn (cs: *const c_char, ct: *const c_char) -&gt; size_t' data-impls='0' data-link='search:2147483824'>strspn</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='233:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='233:42'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483827 src_link' data-impls='0' data-link='search:2147483827' title='fn (cs: *const c_char, ct: *const c_char) -&gt; size_t'>strcspn</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='234:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='234:43'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483830 src_link' title='fn (cs: *const c_char) -&gt; *mut c_char' data-link='search:2147483830' data-impls='0'>strdup</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='235:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='235:41'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483832 src_link' data-impls='0' title='fn (cs: *const c_char, ct: *const c_char) -&gt; *mut c_char' data-link='search:2147483832'>strpbrk</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='236:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='236:43'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='236:61'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483835 src_link' title='fn (cs: *const c_char, ct: *const c_char) -&gt; *mut c_char' data-link='search:2147483835' data-impls='0'>strstr</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='237:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='237:42'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='237:60'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483838 src_link' data-link='search:2147483838' title='fn (cs: *const c_char) -&gt; size_t' data-impls='0'>strlen</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='238:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483840 src_link' title='fn (cs: *const c_char, maxlen: size_t) -&gt; size_t' data-impls='0' data-link='search:2147483840'>strnlen</span>(<span class='ident' data-impls='0'>cs</span>: <span class='op  glob' data-location='239:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0' title='i8'>c_char</span>, <span class='ident' data-impls='0'>maxlen</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='attribute'>#[<span class='ident' data-impls='0'>cfg_attr</span>(<span class='ident' data-impls='0'>all</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;macos&quot;</span>, <span class='ident' data-impls='0'>target_arch</span> <span class='op'>=</span> <span class='string'>&quot;x86&quot;</span>),",
              "               <span class='ident' data-impls='0'>link_name</span> <span class='op'>=</span> <span class='string'>&quot;strerror$UNIX2003&quot;</span>)]</span>",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483843 src_link' data-impls='0' data-link='search:2147483843' title='fn (n: c_int) -&gt; *mut c_char'>strerror</span>(<span class='ident' data-impls='0'>n</span>: <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='242:34'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483845 src_link' data-impls='0' title='fn (s: *mut c_char, t: *const c_char) -&gt; *mut c_char' data-link='search:2147483845'>strtok</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='243:22'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>t</span>: <span class='op  glob' data-location='243:38'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='243:56'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483848 src_link' data-impls='0' title='fn (s: *mut c_char, ct: *const c_char, n: size_t) -&gt; size_t' data-link='search:2147483848'>strxfrm</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='244:23'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16' data-impls='0'>c_char</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='244:40'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483852 src_link' title='fn (buf: *const wchar_t) -&gt; size_t' data-link='search:2147483852' data-impls='0'>wcslen</span>(<span class='ident' data-impls='0'>buf</span>: <span class='op  glob' data-location='245:24'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_210 src_link' title='i32' data-impls='0' data-link='src/unix/bsd/mod.rs:4:10:4:17'>wchar_t</span>) <span class='op'>-&gt;</span> <span class='ident' data-impls='0'>size_t</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483854 src_link' data-impls='0' data-link='search:2147483854' title='fn (dest: *mut c_char, src: *const wchar_t, n: size_t) -&gt; ::size_t'>wcstombs</span>(<span class='ident' data-impls='0'>dest</span>: <span class='op  glob' data-location='246:27'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' title='i8' data-link='src/unix/bsd/mod.rs:3:10:3:16'>c_char</span>, <span class='ident' data-impls='0'>src</span>: <span class='op  glob' data-location='246:45'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_210 src_link' data-link='src/unix/bsd/mod.rs:4:10:4:17' title='i32' data-impls='0'>wchar_t</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> ::<span class='ident' data-impls='0'>size_t</span>;",
              "",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483858 src_link' data-link='search:2147483858' data-impls='0' title='fn (cx: *const c_void, c: c_int, n: size_t) -&gt; *mut c_void'>memchr</span>(<span class='ident' data-impls='0'>cx</span>: <span class='op  glob' data-location='248:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>, <span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='248:62'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-link='src/lib.rs:98:10:98:16' title='c_void::{__variant1, __variant2}' data-impls='0'>c_void</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483862 src_link' data-link='search:2147483862' title='fn (cx: *const c_void, ct: *const c_void, n: size_t) -&gt; c_int' data-impls='0'>memcmp</span>(<span class='ident' data-impls='0'>cx</span>: <span class='op  glob' data-location='249:23'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-link='src/lib.rs:98:10:98:16' data-impls='0'>c_void</span>, <span class='ident' data-impls='0'>ct</span>: <span class='op  glob' data-location='249:42'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483866 src_link' data-impls='0' data-link='search:2147483866' title='fn (dest: *mut c_void, src: *const c_void, n: size_t) -&gt; *mut c_void'>memcpy</span>(<span class='ident' data-impls='0'>dest</span>: <span class='op  glob' data-location='250:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-link='src/lib.rs:98:10:98:16' data-impls='0'>c_void</span>, <span class='ident' data-impls='0'>src</span>: <span class='op  glob' data-location='250:43'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_18 src_link' data-impls='0' title='c_void::{__variant1, __variant2}' data-link='src/lib.rs:98:10:98:16'>c_void</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='250:72'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-link='src/lib.rs:98:10:98:16' title='c_void::{__variant1, __variant2}' data-impls='0'>c_void</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483870 src_link' data-link='search:2147483870' title='fn (dest: *mut c_void, src: *const c_void, n: size_t) -&gt; *mut c_void' data-impls='0'>memmove</span>(<span class='ident' data-impls='0'>dest</span>: <span class='op  glob' data-location='251:26'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-link='src/lib.rs:98:10:98:16' title='c_void::{__variant1, __variant2}' data-impls='0'>c_void</span>, <span class='ident' data-impls='0'>src</span>: <span class='op  glob' data-location='251:44'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_18 src_link' data-impls='0' title='c_void::{__variant1, __variant2}' data-link='src/lib.rs:98:10:98:16'>c_void</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='251:73'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-impls='0' title='c_void::{__variant1, __variant2}' data-link='src/lib.rs:98:10:98:16'>c_void</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483874 src_link' title='fn (dest: *mut c_void, c: c_int, n: size_t) -&gt; *mut c_void' data-impls='0' data-link='search:2147483874'>memset</span>(<span class='ident' data-impls='0'>dest</span>: <span class='op  glob' data-location='252:25'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' title='c_void::{__variant1, __variant2}' data-impls='0' data-link='src/lib.rs:98:10:98:16'>c_void</span>, <span class='ident' data-impls='0'>c</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' title='i32' data-link='src/lib.rs:119:10:119:15'>c_int</span>, <span class='ident' data-impls='0'>n</span>: <span class='ident' data-impls='0'>size_t</span>) <span class='op'>-&gt;</span> <span class='op  glob' data-location='252:62'>*</span><span class='kw-2'>mut</span> <span class='ident  class_id class_id_18 src_link' data-impls='0' data-link='src/lib.rs:98:10:98:16' title='c_void::{__variant1, __variant2}'>c_void</span>;",
              "}",
              "",
              "<span class='comment'>// These are all inline functions on android, so they end up just being entirely</span>",
              "<span class='comment'>// missing on that platform.</span>",
              "<span class='attribute'>#[<span class='ident' data-impls='0'>cfg</span>(<span class='ident' data-impls='0'>not</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;android&quot;</span>))]</span>",
              "<span class='kw'>extern</span> {",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483878 src_link' data-impls='0' title='fn (i: c_int) -&gt; c_int' data-link='search:2147483878'>abs</span>(<span class='ident' data-impls='0'>i</span>: <span class='ident  class_id class_id_31 src_link' data-impls='0' data-link='src/lib.rs:119:10:119:15' title='i32'>c_int</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' data-link='src/lib.rs:119:10:119:15' title='i32' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483880 src_link' title='fn (s: *const c_char) -&gt; c_double' data-impls='0' data-link='search:2147483880'>atof</span>(<span class='ident' data-impls='0'>s</span>: <span class='op  glob' data-location='260:20'>*</span><span class='kw'>const</span> <span class='ident  class_id class_id_209 src_link' data-impls='0' data-link='src/unix/bsd/mod.rs:3:10:3:16' title='i8'>c_char</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_34 src_link' data-link='src/lib.rs:122:10:122:18' data-impls='0' title='f64'>c_double</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483882 src_link' title='fn (i: c_long) -&gt; c_long' data-link='search:2147483882' data-impls='0'>labs</span>(<span class='ident' data-impls='0'>i</span>: <span class='ident  class_id class_id_1724 src_link' data-link='src/unix/bsd/apple/b64.rs:3:10:3:16' title='i64' data-impls='0'>c_long</span>) <span class='op'>-&gt;</span> <span class='ident  class_id class_id_1724 src_link' title='i64' data-link='src/unix/bsd/apple/b64.rs:3:10:3:16' data-impls='0'>c_long</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483884 src_link' data-link='search:2147483884' title='fn () -&gt; c_int' data-impls='0'>rand</span>() <span class='op'>-&gt;</span> <span class='ident  class_id class_id_31 src_link' title='i32' data-link='src/lib.rs:119:10:119:15' data-impls='0'>c_int</span>;",
              "    <span class='kw'>pub</span> <span class='kw'>fn</span> <span class='ident  class_id class_id_2147483885 src_link' data-impls='0' title='fn (seed: c_uint) -&gt; ()' data-link='search:2147483885'>srand</span>(<span class='ident' data-impls='0'>seed</span>: <span class='ident  class_id class_id_32 src_link' title='u32' data-impls='0' data-link='src/lib.rs:120:10:120:16'>c_uint</span>);",
              "}",
              "",
              "<span class='macro'>cfg_if</span><span class='macro'>!</span> {",
              "    <span class='kw'>if</span> <span class='attribute'>#[<span class='ident' data-impls='0'>cfg</span>(<span class='ident' data-impls='0'>windows</span>)]</span> {",
              "        <span class='kw'>mod</span> <span class='ident' data-impls='0'>windows</span>;",
              "        <span class='kw'>pub</span> <span class='kw'>use</span> <span class='ident' data-impls='0'>windows</span>::<span class='op  glob' data-location='269:26'>*</span>;",
              "    } <span class='kw'>else</span> <span class='kw'>if</span> <span class='attribute'>#[<span class='ident' data-impls='0'>cfg</span>(<span class='ident' data-impls='0'>target_os</span> <span class='op'>=</span> <span class='string'>&quot;redox&quot;</span>)]</span> {",
              "        <span class='kw'>mod</span> <span class='ident' data-impls='0'>redox</span>;",
              "        <span class='kw'>pub</span> <span class='kw'>use</span> <span class='ident' data-impls='0'>redox</span>::<span class='op  glob' data-location='272:24'>*</span>;",
              "    } <span class='kw'>else</span> <span class='kw'>if</span> <span class='attribute'>#[<span class='ident' data-impls='0'>cfg</span>(<span class='ident' data-impls='0'>unix</span>)]</span> {",
              "        <span class='kw'>mod</span> <span class='ident  class_id class_id_48 src_link' data-link='src/unix/mod.rs:1:1:1:1' title='src/unix/mod.rs\n\n Definitions found commonly among almost all Unix derivatives' data-impls='0'>unix</span>;",
              "        <span class='kw'>pub</span> <span class='kw'>use</span> <span class='ident' data-impls='0'>unix</span>::<span class='op  glob' data-location='275:23' title='glob_t, wchar_t, sem_t, tcflag_t, fsblkcnt_t, socklen_t, off_t, dev_t, clock_t, termios, winsize, kevent64_s, in6_addr, msghdr, locale_t, c_ulong, sighandler_t, gid_t, c_long, pthread_attr_t, nl_item, fsfilcnt_t, sa_family_t, tms, time_t, iovec, boolean_t, c_char, timeval, tm, sockaddr, dirent, cc_t, pid_t, timezone, id_t, speed_t, pthread_t, mode_t, blkcnt_t, sigval, sf_hdtr, NCCS, kevent, fsid_t, in_addr, timespec, utsname, ifaddrs, siginfo_t, DIR, in_port_t, mach_timebase_info, uid_t'>*</span>;",
              "    } <span class='kw'>else</span> {",
              "        <span class='comment'>// Unknown target_family</span>",
              "    }",
              "}",
              ""
          ]
      }
    }
  ]
}
